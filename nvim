
if vim.loader then
  vim.loader.enable()
end


-- SECTION: theme

-- Catppuccin theme
require('catppuccin').setup {
  flavour = "macchiato",
  transparent_background = true,
  term_colors = true,
  integrations = {
    nvimtree = {
      enabled = true,
      transparent_panel = true,
      show_root = true,
    },

    hop = true,
    gitsigns = true,
    telescope = true,
    treesitter = true,
    treesitter_context = true,
    ts_rainbow = true,
    fidget = true,
    alpha = true,
    leap = true,
    lsp_saga = true,
    markdown = true,
    noice = true,
    notify = true, -- nvim-notify
    which_key = true,
    navic = {
      enabled = true,
      custom_bg = "NONE", -- "lualine" will set background to mantle
    },
  },
}
-- setup must be called before loading
vim.cmd.colorscheme "catppuccin"




-- SECTION: globalsScript
vim.g.editorconfig = true
vim.g.mapleader = " "
vim.g.maplocalleader = ","


-- SECTION: basic
vim.cmd("syntax on")








vim.o.smartcase = false
vim.o.ignorecase = false



-- SECTION: optionsScript
vim.o.autoindent = true
vim.o.backup = false
vim.o.clipboard = "unnamedplus"
vim.o.cmdheight = 1
vim.o.cursorlineopt = "line"
vim.o.encoding = "utf-8"
vim.o.errorbells = false
vim.o.expandtab = true
vim.o.exrc = true
vim.o.hidden = true
vim.o.mouse = ""
vim.o.number = true
vim.o.relativenumber = true
vim.o.secure = true
vim.o.shiftwidth = 2
vim.o.signcolumn = "yes"
vim.o.splitbelow = true
vim.o.splitright = true
vim.o.swapfile = false
vim.o.tabstop = 2
vim.o.termguicolors = true
vim.o.tm = 500
vim.o.undodir = vim.fn.stdpath('state') .. '/undo'
vim.o.undofile = true
vim.o.updatetime = 300
vim.o.visualbell = false
vim.o.wrap = true
vim.o.writebackup = false


-- SECTION: lazyConfigs
require('lz.n').load({{"blink-cmp",["after"] = function()
  
  require("blink.cmp").setup({["cmdline"] = {["keymap"] = {["<C-Space>"] = {"show","fallback"},["<C-d>"] = {"scroll_documentation_up","fallback"},["<C-e>"] = {"hide","fallback"},["<C-f>"] = {"scroll_documentation_down","fallback"},["<S-Tab>"] = {"select_prev","fallback"},["<Tab>"] = {"select_next","show","fallback"},["preset"] = "none"}},["completion"] = {["documentation"] = {["auto_show"] = true,["auto_show_delay_ms"] = 200},["menu"] = {["auto_show"] = true}},["fuzzy"] = {["implementation"] = "prefer_rust",["prebuilt_binaries"] = {["download"] = false}},["keymap"] = {["<C-Space>"] = {"show","fallback"},["<C-d>"] = {"scroll_documentation_up","fallback"},["<C-e>"] = {"hide","fallback"},["<C-f>"] = {"scroll_documentation_down","fallback"},["<CR>"] = {"accept","fallback"},["<S-Tab>"] = {"select_prev","snippet_backward","fallback"},["<Tab>"] = {"select_next","snippet_forward",function(cmp)
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  has_words_before = col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil

  if has_words_before then
    return cmp.show()
  end
end
,"fallback"},["preset"] = "none"},["sources"] = {["default"] = {"lsp","path","snippets","buffer","crates"},["providers"] = {["crates"] = {["module"] = "blink.compat.source",["name"] = "crates"}}}})
  

end
},{"cheatsheet-nvim",["after"] = function()
  
  require("cheatsheet").setup({})
  
end
,["before"] = function()
  require('lz.n').trigger_load('telescope')
end
,["cmd"] = {"Cheatsheet","CheatsheetEdit"}},{"comment-nvim",["after"] = function()
  
  require("Comment").setup({["mappings"] = {["basic"] = false,["extra"] = false}})
  
end
,["keys"] = {{"gc","<Plug>(comment_toggle_linewise)",["desc"] = "Toggle line comment",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gb","<Plug>(comment_toggle_blockwise)",["desc"] = "Toggle block comment",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<C-l>",function()
  return vim.api.nvim_get_vvar('count') == 0 and '<Plug>(comment_toggle_linewise_current)'
          or '<Plug>(comment_toggle_linewise_count)'
end
,["desc"] = "Toggle current line comment",["expr"] = true,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gbc",function()
  return vim.api.nvim_get_vvar('count') == 0 and '<Plug>(comment_toggle_blockwise_current)'
          or '<Plug>(comment_toggle_blockwise_count)'
end
,["desc"] = "Toggle current block comment",["expr"] = true,["mode"] = {"n"},["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gc","<Plug>(comment_toggle_linewise_visual)",["desc"] = "Toggle selected comment",["expr"] = false,["mode"] = "x",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gb","<Plug>(comment_toggle_blockwise_visual)",["desc"] = "Toggle selected block",["expr"] = false,["mode"] = "x",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false}}},{"fidget-nvim",["after"] = function()
  
  require("fidget").setup({["integration"] = {["nvim-tree"] = {["enable"] = false},["xcodebuild-nvim"] = {["enable"] = true}},["logger"] = {["float_precision"] = 0.010000,["level"] = vim.log.levels.WARN,["max_size"] = 10000,["path"] = string.format("%s/fidget.nvim.log", vim.fn.stdpath("cache"))
},["notification"] = {["configs"] = {["default"] = require('fidget.notification').default_config},["filter"] = vim.log.levels.INFO,["history_size"] = 128,["override_vim_notify"] = false,["poll_rate"] = 10,["redirect"] = function(msg, level, opts)
  if opts and opts.on_open then
    return require("fidget.integration.nvim-notify").delegate(msg, level, opts)
  end
end
,["view"] = {["group_separator"] = "---",["group_separator_hl"] = "Comment",["icon_separator"] = " ",["render_message"] = function(msg, cnt)
  return cnt == 1 and msg or string.format("(%dx) %s", cnt, msg)
end
,["stack_upwards"] = true},["window"] = {["align"] = "bottom",["border"] = "rounded",["max_height"] = 0,["max_width"] = 0,["normal_hl"] = "Comment",["relative"] = "editor",["winblend"] = 100,["x_padding"] = 1,["y_padding"] = 0,["zindex"] = 45}},["progress"] = {["display"] = {["done_icon"] = "✓",["done_style"] = "Constant",["done_ttl"] = 3,["format_annote"] = function(msg) return msg.title end
,["format_group_name"] = function(group) return tostring(group) end
,["format_message"] = require("fidget.progress.display").default_format_message
,["group_style"] = "Title",["icon_style"] = "Question",["overrides"] = {},["priority"] = 30,["progress_icon"] = {["pattern"] = "dots",["period"] = 1},["progress_style"] = "WarningMsg",["progress_ttl"] = 99999,["render_limit"] = 16,["skip_history"] = true},["ignore"] = {},["ignore_done_already"] = false,["ignore_empty_message"] = false,["lsp"] = {["log_handler"] = false,["progress_ringbuf_size"] = 100},["notification_group"] = function(msg)
  return msg.lsp_client.name
end
,["poll_rate"] = 0,["suppress_on_insert"] = false}})
  
end
,["event"] = "LspAttach"},{"gitlinker-nvim",["after"] = function()
  
  require("gitlinker").setup({})
  
end
,["cmd"] = {"GitLink"}},{"hunk-nvim",["after"] = function()
  
  require("hunk").setup({})
  
end
},{"neo-tree-nvim",["after"] = function()
  
  require("neo-tree").setup({["add_blank_line_at_top"] = false,["auto_clean_after_session_restore"] = false,["default_component_configs"] = {["indent"] = {["expander_collapsed"] = "",["expander_expanded"] = "",["expander_highlight"] = "NeoTreeExpander",["with_expanders"] = true}},["default_source"] = "filesystem",["enable_cursor_hijack"] = true,["enable_diagnostics"] = true,["enable_git_status"] = true,["enable_modified_markers"] = true,["enable_opened_markers"] = true,["enable_refresh_on_write"] = true,["filesystem"] = {["filtered_items"] = {["hide_by_name"] = {".DS_Store","thumbs.db","node_modules",".git"},["hide_dotfiles"] = false,["hide_gitignored"] = false,["hide_hidden"] = false},["hijack_netrw_behavior"] = "open_default"},["git_status_async"] = false,["hide_root_node"] = false,["log_level"] = "info",["log_to_file"] = false,["open_files_do_not_replace_types"] = {"terminal","Trouble","qf","edgy"},["open_files_in_last_window"] = true,["retain_hidden_root_indent"] = false})
  
end
,["cmd"] = {"Neotree"}},{"nvim-dap-ui",["after"] = function()
  
  require("dapui").setup({})
  
end
,["keys"] = {{"<leader>du",function() require('dapui').toggle() end,["desc"] = "Toggle DAP-UI",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false}}},{"nvim-surround",["after"] = function()
  
  require("nvim-surround").setup({["keymaps"] = {["change"] = "gzr",["change_line"] = "gZR",["delete"] = "gzd",["insert"] = "<C-g>z",["insert_line"] = "<C-g>Z",["normal"] = "gz",["normal_cur"] = "gZ",["normal_cur_line"] = "gZZ",["normal_line"] = "gzz",["visual"] = "gz",["visual_line"] = "gZ"}})
  
end
,["event"] = {"BufReadPre","BufNewFile"},["keys"] = {{"<C-g>z",["expr"] = false,["mode"] = "i",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<C-g>Z",["expr"] = false,["mode"] = "i",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gz",["expr"] = false,["mode"] = "x",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gZ",["expr"] = false,["mode"] = "x",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gz",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gZ",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gzz",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gZZ",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gzd",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gzr",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"gZR",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false}}},{"telescope",["after"] = function()
  
  require("telescope").setup({["defaults"] = {["color_devicons"] = false,["entry_prefix"] = "  ",["extensions"] = {},["file_ignore_patterns"] = {"node_modules",".git/",".direnv/",".svelte-kit/","dist/","build/","target/","result/"},["initial_mode"] = "insert",["layout_config"] = {["height"] = 0.800000,["horizontal"] = {["preview_width"] = 0.550000,["prompt_position"] = "top"},["preview_cutoff"] = 120,["vertical"] = {["mirror"] = false},["width"] = 0.800000},["layout_strategy"] = "horizontal",["path_display"] = {"absolute"},["pickers"] = {["find_command"] = {"/nix/store/dk31gqj4lfsmx7ynmkh0nfs6dgmig7im-fd-10.2.0/bin/fd"}},["prompt_prefix"] = "     ",["selection_caret"] = "  ",["selection_strategy"] = "reset",["set_env"] = {["COLORTERM"] = "truecolor"},["sorting_strategy"] = "ascending",["vimgrep_arguments"] = {"/nix/store/8m8bfl2xl7vpr8qlibgb0cd3ybkkmn3j-ripgrep-14.1.1/bin/rg","--color=never","--no-heading","--with-filename","--line-number","--column","--smart-case","--hidden","--no-ignore"},["winblend"] = 0},["pickers"] = {["find_files"] = {["find_command"] = {"/nix/store/dk31gqj4lfsmx7ynmkh0nfs6dgmig7im-fd-10.2.0/bin/fd","--type=file","--hidden"},["hidden"] = true}}})
  local telescope = require("telescope")

telescope.load_extension('notify')
telescope.load_extension('projects')


end
,["before"] = function()
  vim.g.loaded_telescope = nil

end
,["cmd"] = {"Telescope"},["keys"] = {{"<leader>ff","<cmd>Telescope find_files<CR>",["desc"] = "Find files [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fg","<cmd>Telescope live_grep<CR>",["desc"] = "Live grep [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fb","<cmd>Telescope buffers<CR>",["desc"] = "Buffers [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fh","<cmd>Telescope help_tags<CR>",["desc"] = "Help tags [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>ft","<cmd>Telescope<CR>",["desc"] = "Open [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fr","<cmd>Telescope resume<CR>",["desc"] = "Resume (previous search) [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fvcw","<cmd>Telescope git_commits<CR>",["desc"] = "Git commits [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fvcb","<cmd>Telescope git_bcommits<CR>",["desc"] = "Git buffer commits [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fvb","<cmd>Telescope git_branches<CR>",["desc"] = "Git branches [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fvs","<cmd>Telescope git_status<CR>",["desc"] = "Git status [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fvx","<cmd>Telescope git_stash<CR>",["desc"] = "Git stash [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>flsb","<cmd>Telescope lsp_document_symbols<CR>",["desc"] = "LSP Document Symbols [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>flsw","<cmd>Telescope lsp_workspace_symbols<CR>",["desc"] = "LSP Workspace Symbols [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>flr","<cmd>Telescope lsp_references<CR>",["desc"] = "LSP References [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fli","<cmd>Telescope lsp_implementations<CR>",["desc"] = "LSP Implementations [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>flD","<cmd>Telescope lsp_definitions<CR>",["desc"] = "LSP Definitions [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>flt","<cmd>Telescope lsp_type_definitions<CR>",["desc"] = "LSP Type Definitions [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fld","<cmd>Telescope diagnostics<CR>",["desc"] = "Diagnostics [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fs","<cmd>Telescope treesitter<CR>",["desc"] = "Treesitter [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>fp","<cmd>Telescope projects<CR>",["desc"] = "Find projects [Telescope]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false}}},{"toggleterm-nvim",["after"] = function()
  
  require("toggleterm").setup({["direction"] = "float",["enable_winbar"] = false,["size"] = function(term)
  if term.direction == "horizontal" then
    return 15
  elseif term.direction == "vertical" then
    return vim.o.columns * 0.4
  end
end
,["winbar"] = {["enabled"] = true,["name_formatter"] = function(term)
  return term.name
end
}})
  local terminal = require 'toggleterm.terminal'
local lazygit = terminal.Terminal:new({
  cmd = '/nix/store/vrsrfm058q6c985hlz948rzw37b6q6v1-lazygit-0.53.0/bin/lazygit',
  direction = 'float',
  hidden = true,
  on_open = function(term)
    vim.cmd("startinsert!")
  end
})

vim.keymap.set('n', "<leader>gg", function() lazygit:toggle() end, {silent = true, noremap = true, desc = 'Open lazygit [toggleterm]'})

end
,["cmd"] = {"ToggleTerm","ToggleTermSendCurrentLine","ToggleTermSendVisualLines","ToggleTermSendVisualSelection","ToggleTermSetName","ToggleTermToggleAll"},["keys"] = {{"<c-t>","<Cmd>execute v:count . \"ToggleTerm\"<CR>",["desc"] = "Toggle terminal",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>gg",["desc"] = "Open lazygit [toggleterm]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false}}},{"trouble",["after"] = function()
  
  require("trouble").setup({})
  
end
,["cmd"] = "Trouble",["keys"] = {{"<leader>lwd","<cmd>Trouble toggle diagnostics<CR>",["desc"] = "Workspace diagnostics [trouble]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>ld","<cmd>Trouble toggle diagnostics filter.buf=0<CR>",["desc"] = "Document diagnostics [trouble]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>lr","<cmd>Trouble toggle lsp_references<CR>",["desc"] = "LSP References [trouble]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>xq","<cmd>Trouble toggle quickfix<CR>",["desc"] = "QuickFix [trouble]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>xl","<cmd>Trouble toggle loclist<CR>",["desc"] = "LOCList [trouble]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false},{"<leader>xs","<cmd>Trouble toggle symbols<CR>",["desc"] = "Symbols [trouble]",["expr"] = false,["mode"] = "n",["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false}}}})
require('lzn-auto-require').enable()


-- SECTION: pluginConfigs
-- SECTION: autopairs
require('nvim-autopairs').setup({})


-- SECTION: lsp-setup
vim.g.formatsave = true;

local attach_keymaps = function(client, bufnr)
  vim.keymap.set('n', '<leader>lgD', vim.lsp.buf.declaration, {buffer=bufnr, noremap=true, silent=true, desc='Go to declaration'})
  vim.keymap.set('n', '<leader>lgd', vim.lsp.buf.definition, {buffer=bufnr, noremap=true, silent=true, desc='Go to definition'})
  vim.keymap.set('n', '<leader>lgt', vim.lsp.buf.type_definition, {buffer=bufnr, noremap=true, silent=true, desc='Go to type'})
  vim.keymap.set('n', '<leader>lgi', vim.lsp.buf.implementation, {buffer=bufnr, noremap=true, silent=true, desc='List implementations'})
  vim.keymap.set('n', '<leader>lgr', vim.lsp.buf.references, {buffer=bufnr, noremap=true, silent=true, desc='List references'})
  vim.keymap.set('n', '<leader>lgn', vim.diagnostic.goto_next, {buffer=bufnr, noremap=true, silent=true, desc='Go to next diagnostic'})
  vim.keymap.set('n', '<leader>lgp', vim.diagnostic.goto_prev, {buffer=bufnr, noremap=true, silent=true, desc='Go to previous diagnostic'})
  vim.keymap.set('n', '<leader>le', vim.diagnostic.open_float, {buffer=bufnr, noremap=true, silent=true, desc='Open diagnostic float'})
  vim.keymap.set('n', '<leader>lH', vim.lsp.buf.document_highlight, {buffer=bufnr, noremap=true, silent=true, desc='Document highlight'})
  vim.keymap.set('n', '<leader>lS', vim.lsp.buf.document_symbol, {buffer=bufnr, noremap=true, silent=true, desc='List document symbols'})
  vim.keymap.set('n', '<leader>lwa', vim.lsp.buf.add_workspace_folder, {buffer=bufnr, noremap=true, silent=true, desc='Add workspace folder'})
  vim.keymap.set('n', '<leader>lwr', vim.lsp.buf.remove_workspace_folder, {buffer=bufnr, noremap=true, silent=true, desc='Remove workspace folder'})
  vim.keymap.set('n', '<leader>lwl', function() vim.notify(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, {buffer=bufnr, noremap=true, silent=true, desc='List workspace folders'})
  vim.keymap.set('n', '<leader>lws', vim.lsp.buf.workspace_symbol, {buffer=bufnr, noremap=true, silent=true, desc='List workspace symbols'})
  vim.keymap.set('n', '<leader>lh', vim.lsp.buf.hover, {buffer=bufnr, noremap=true, silent=true, desc='Trigger hover'})
  vim.keymap.set('n', '<leader>ls', vim.lsp.buf.signature_help, {buffer=bufnr, noremap=true, silent=true, desc='Signature help'})
  vim.keymap.set('n', '<leader>ln', vim.lsp.buf.rename, {buffer=bufnr, noremap=true, silent=true, desc='Rename symbol'})
  vim.keymap.set('n', '<leader>la', vim.lsp.buf.code_action, {buffer=bufnr, noremap=true, silent=true, desc='Code action'})
  
  vim.keymap.set('n', '<leader>ltf', function() vim.b.disableFormatSave = not vim.b.disableFormatSave end, {buffer=bufnr, noremap=true, silent=true, desc='Toggle format on save'})
end


default_on_attach = function(client, bufnr)
  attach_keymaps(client, bufnr)
  
end

local capabilities = vim.lsp.protocol.make_client_capabilities()


capabilities = require('blink.cmp').get_lsp_capabilities()



-- SECTION: lspconfig
local lspconfig = require('lspconfig')

require('lspconfig.ui.windows').default_options.border = "rounded"



-- SECTION: bash-lsp
lspconfig.bashls.setup{
  capabilities = capabilities;
  on_attach = default_on_attach;
  cmd = {"/nix/store/6kz0wj0md18d7kgcja89c0z22wq4b3dw-bash-language-server-5.6.0/bin/bash-language-server",  "start"};
}


-- SECTION: c-header
vim.g.c_syntax_for_h = 1

-- SECTION: nvim-dap
local dap = require("dap")
vim.fn.sign_define("DapBreakpoint", { text = "🛑", texthl = "ErrorMsg", linehl = "", numhl = "" })


-- SECTION: clang-debugger
dap.adapters.lldb = {
  type = 'executable',
  command = '/nix/store/69zahfzdmmqqdn4zvqkpp4d3xvr5478v-lldb-19.1.7/bin/lldb-dap',
  name = 'lldb'
}
dap.configurations.cpp = {
  {
    name = 'Launch',
    type = 'lldb',
    request = 'launch',
    program = function()
      return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
    end,
    cwd = "${workspaceFolder}",
    stopOnEntry = false,
    args = {},
  },
}

dap.configurations.c = dap.configurations.cpp


-- SECTION: clang-lsp
local clangd_cap = capabilities
-- use same offsetEncoding as null-ls
clangd_cap.offsetEncoding = {"utf-16"}
lspconfig.clangd.setup{
  capabilities = clangd_cap;
  on_attach=default_on_attach;
  cmd = { "/nix/store/iq3rkmikxq0sajx7r00n4yrx8hli0jf4-clang-tools-19.1.7/bin/clangd" };
  
}


-- SECTION: colorizer
require('colorizer').setup({["filetypes"] = {},["user_default_options"] = {}})


-- SECTION: conform-nvim
require("conform").setup({["default_format_opts"] = {["lsp_format"] = "fallback"},["format_after_save"] = function()
  if not vim.g.formatsave or vim.b.disableFormatSave then
    return
  else
    return {["lsp_format"] = "fallback"}
  end
end
,["format_on_save"] = function()
  if not vim.g.formatsave or vim.b.disableFormatSave then
    return
  else
    return {lsp_format = "fallback", timeout_ms = 500}
  end
end
,["formatters"] = {["alejandra"] = {["command"] = "/nix/store/8my9sjni9ydwfv0drm7rras2pb4il90h-alejandra-4.0.0/bin/alejandra"},["biome"] = {["command"] = "/nix/store/jjjzjzmr95sszjypzvj5mw7ylzk737i7-biome-2.1.1/bin/biome"},["black"] = {["command"] = "/nix/store/hwnbbg06lsxh3ai5kmchdn2dwrsrlvdg-python3.13-black-25.1.0/bin/black"},["prettierd"] = {["command"] = "/nix/store/8a1nc7l7zndgxna6khicyi9kjff726pg-prettierd-0.26.1/bin/prettierd"},["rustfmt"] = {["command"] = "/nix/store/x7hi9blgs4zv8sf4hzmsy6fqk1jx9ksz-rustfmt-1.88.0/bin/rustfmt"},["shfmt"] = {["command"] = "/nix/store/wl4fzdd01426abdq2fpmnyihdw2nyqcx-shfmt-3.12.0/bin/shfmt"},["sqlfluff"] = {["append_args"] = {"--dialect=ansi"},["command"] = "/nix/store/x2qzlmkc86v6qb5fg1mgm5wm3b9pwljw-sqlfluff-3.4.2/bin/sqlfluff"}},["formatters_by_ft"] = {["astro"] = {"prettierd"},["css"] = {"prettierd"},["graphql"] = {"prettierd"},["html"] = {"prettierd"},["javascript"] = {"prettierd"},["javascriptreact"] = {"prettierd"},["json"] = {"prettierd"},["json5"] = {"prettierd"},["jsonc"] = {"prettierd"},["less"] = {"prettierd"},["markdown"] = {"prettierd"},["nix"] = {"alejandra"},["python"] = {"black"},["rust"] = {"rustfmt"},["scss"] = {"prettierd"},["sh"] = {"shfmt"},["sql"] = {"sqlfluff"},["svelte"] = {"prettierd"},["typescript"] = {"prettierd"},["typescriptreact"] = {"prettierd"},["vue"] = {"prettierd"},["yaml"] = {"prettierd"}}})


-- SECTION: csharp-lsp
local extended_handler = require("csharpls_extended").handler

lspconfig.csharp_ls.setup {
  capabilities = capabilities,
  on_attach = default_on_attach,
  handlers = {
    ["textDocument/definition"] = extended_handler,
    ["textDocument/typeDefinition"] = extended_handler
  },
  cmd = {'/nix/store/yargvmb6hqmgydkiiqck596qbcz75lw6-csharp-ls-0.18.0/bin/csharp-ls'}
}


-- SECTION: git-conflict
require('git-conflict').setup({["default_mappings"] = false})


-- SECTION: gitsigns
require('gitsigns').setup({})


-- SECTION: html-autotag
require('nvim-ts-autotag').setup()


-- SECTION: image-nvim
require("image").setup(
  {["backend"] = "kitty",["editorOnlyRenderWhenFocused"] = false,["hijackFilePatterns"] = {"*.png","*.jpg","*.jpeg","*.gif","*.webp"},["integrations"] = {["markdown"] = {["clearInInsertMode"] = false,["downloadRemoteImages"] = false,["enable"] = true,["filetypes"] = {"markdown","vimwiki"},["onlyRenderAtCursor"] = false},["neorg"] = {["clearInInsertMode"] = false,["downloadRemoteImages"] = false,["enable"] = true,["filetypes"] = {"neorg"},["onlyRenderAtCursor"] = false}},["maxHeightWindowPercentage"] = 50,["windowOverlapClear"] = {["enable"] = false,["ftIgnore"] = {"cmp_menu","cmp_docs",""}}}
)


-- SECTION: indent-blankline
require("ibl").setup({["debounce"] = 200,["indent"] = {["char"] = "│",["priority"] = 1,["repeat_linebreak"] = true,["smart_indent_cap"] = true},["scope"] = {["char"] = "│",["enabled"] = true,["exclude"] = {["language"] = {},["node_type"] = {["*"] = {"source_file","program"},["lua"] = {"chunk"},["python"] = {"module"}}},["include"] = {["node_type"] = {}},["injected_languages"] = true,["priority"] = 1024,["show_end"] = false,["show_exact_scope"] = false,["show_start"] = false},["viewport_buffer"] = {["max"] = 500,["min"] = 30},["whitespace"] = {["remove_blankline_trail"] = true}})


-- SECTION: lazydev
require("lazydev").setup({
  enabled = function(root_dir)
    return not vim.uv.fs_stat(root_dir .. "/.luarc.json")
  end,
  library = { { path = "${3rd}/luv/library", words = { "vim%.uv" } } },
})


-- SECTION: lua-lsp
lspconfig.lua_ls.setup {
  capabilities = capabilities;
  on_attach = default_on_attach;
  cmd = {"/nix/store/pd9j9854p3q2vsg5bsz26hkdh21hx4fs-lua-language-server-3.15.0/bin/lua-language-server"};
}


-- SECTION: lualine
local lualine = require('lualine')
lualine.setup {["extensions"] = {"neo-tree"},["inactive_sections"] = {["lualine_a"] = {},["lualine_b"] = {},["lualine_c"] = {'filename'},["lualine_x"] = {'location'},["lualine_y"] = {},["lualine_z"] = {}},["options"] = {["always_divide_middle"] = true,["component_separators"] = {["left"] = "",["right"] = ""},["globalstatus"] = true,["icons_enabled"] = true,["refresh"] = {["statusline"] = 1000,["tabline"] = 1000,["winbar"] = 1000},["section_separators"] = {["left"] = "",["right"] = ""},["theme"] = "auto"},["sections"] = {["lualine_a"] = {{
  "mode",
  icons_enabled = true,
  separator = {
    left = '▎',
    right = ''
  },
}
,{
  "",
  draw_empty = true,
  separator = { left = '', right = '' }
}
},["lualine_b"] = {{
  "filetype",
  colored = true,
  icon_only = true,
  icon = { align = 'left' }
}
,{
  "filename",
  symbols = {modified = ' ', readonly = ' '},
  separator = {right = ''}
}
,{
  "",
  draw_empty = true,
  separator = { left = '', right = '' }
}
},["lualine_c"] = {{
  "diff",
  colored = false,
  diff_color = {
    -- Same color values as the general color option can be used here.
    added    = 'DiffAdd',    -- Changes the diff's added color
    modified = 'DiffChange', -- Changes the diff's modified color
    removed  = 'DiffDelete', -- Changes the diff's removed color you
  },
  symbols = {added = '+', modified = '~', removed = '-'}, -- Changes the diff symbols
  separator = {right = ''}
}
},["lualine_x"] = {{
  -- Lsp server name
  function()
    local buf_ft = vim.bo.filetype
    local excluded_buf_ft = { toggleterm = true, NvimTree = true, ["neo-tree"] = true, TelescopePrompt = true }

    if excluded_buf_ft[buf_ft] then
      return ""
      end

    local bufnr = vim.api.nvim_get_current_buf()
    local clients = vim.lsp.get_clients({ bufnr = bufnr })

    if vim.tbl_isempty(clients) then
      return "No Active LSP"
    end

    local active_clients = {}
    for _, client in ipairs(clients) do
      table.insert(active_clients, client.name)
    end

    return table.concat(active_clients, ", ")
  end,
  icon = ' ',
  separator = {left = ''},
}
,{
  "diagnostics",
  sources = {'nvim_lsp', 'nvim_diagnostic', 'nvim_diagnostic', 'vim_lsp', 'coc'},
  symbols = {error = '󰅙  ', warn = '  ', info = '  ', hint = '󰌵 '},
  colored = true,
  update_in_insert = false,
  always_visible = false,
  diagnostics_color = {
    color_error = { fg = 'red' },
    color_warn = { fg = 'yellow' },
    color_info = { fg = 'cyan' },
  },
}
},["lualine_y"] = {{
  "",
  draw_empty = true,
  separator = { left = '', right = '' }
}
,{
  'searchcount',
  maxcount = 999,
  timeout = 120,
  separator = {left = ''}
}
,{
  "branch",
  icon = ' •',
  separator = {left = ''}
}
},["lualine_z"] = {{
  "",
  draw_empty = true,
  separator = { left = '', right = '' }
}
,{
  "progress",
  separator = {left = ''}
}
,{"location"}
,{
  "fileformat",
  color = {fg='black'},
  symbols = {
    unix = '', -- e712
    dos = '',  -- e70f
    mac = '',  -- e711
  }
}
}}}


-- SECTION: markdown-lsp
lspconfig.marksman.setup{
  capabilities = capabilities;
  on_attach = default_on_attach;
  cmd = {"/nix/store/cns6vnjh95pxd9cnx4cl6vrwgfd4v594-marksman-2024-12-18/bin/marksman", "server"},
}


-- SECTION: modes-nvim
require('modes').setup({["colors"] = {["copy"] = "#f5c359",["delete"] = "#c75c6a",["insert"] = "#78ccc5",["visual"] = "#9745be"},["line_opacity"] = {["visual"] = 0.000000},["setCursorline"] = false})


-- SECTION: neo-tree
vim.api.nvim_create_autocmd("BufEnter", {
  group = vim.api.nvim_create_augroup("load_neo_tree", {}),
  desc = "Loads neo-tree when opening a directory",
  callback = function(args)
    local stats = vim.uv.fs_stat(args.file)

    if not stats or stats.type ~= "directory" then
      return
    end

    require("lz.n").trigger_load("neo-tree-nvim")

    return true
  end,
})


-- SECTION: neocord
-- Description of each option can be found in https://github.com/IogaMaster/neocord#lua
require("neocord").setup({["auto_update"] = true,["blacklist"] = {},["client_id"] = "1157438221865717891",["debounce_timeout"] = 10,["editing_text"] = "Editing %s",["enable_line_number"] = false,["file_explorer_text"] = "Browsing %s",["git_commit_text"] = "Committing changes",["line_number_text"] = "Line %s out of %s",["logo"] = "auto",["logo_tooltip"] = "The One True Text Editor",["main_image"] = "language",["plugin_manager_text"] = "Managing plugins",["reading_text"] = "Reading %s",["show_time"] = true,["terminal_text"] = "Working on the terminal",["workspace_text"] = "Working on %s"})


-- SECTION: nix-lsp
lspconfig.nil_ls.setup{
  capabilities = capabilities,
on_attach = attach_keymaps,
  cmd = {"/nix/store/rdk1af47xzj1l3q9l5clfsavya99jcv6-nil-2025-06-13/bin/nil"},

}


-- SECTION: null_ls
require('null-ls').setup({["debounce"] = 250,["debug"] = false,["default_timeout"] = 5000,["diagnostics_format"] = "[#{m}] #{s} (#{c})",["on_attach"] = on_attach,["sources"] = {require("null-ls").builtins.code_actions.gitsigns
}})


-- SECTION: nvim-cursorline
require("nvim-cursorline").setup({["cursorline"] = {["enable"] = false,["number"] = false,["timeout"] = 1000},["cursorword"] = {["enable"] = false,["hl"] = {["underline"] = true},["min_length"] = 3,["timeout"] = 1000}})


-- SECTION: nvim-dap-ui
dap.listeners.after.event_initialized["dapui_config"] = function()
  require("dapui").open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  require("dapui").close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  require("dapui").close()
end


-- SECTION: nvim-docs-view
require("docs-view").setup {["height"] = 10,["position"] = "right",["update_mode"] = "auto",["width"] = 60}


-- SECTION: nvim-lint
require("lint").linters_by_ft = {["astro"] = {"eslint_d"},["javascript"] = {"eslint_d"},["javascriptreact"] = {"eslint_d"},["nix"] = {"statix","deadnix"},["sh"] = {"shellcheck"},["sql"] = {"sqlfluff"},["svelte"] = {"eslint_d"},["typescript"] = {"eslint_d"},["typescriptreact"] = {"eslint_d"}}

local linters = require("lint").linters
local nvf_linters = {["deadnix"] = {["cmd"] = "/nix/store/l5dfgvm9w7xspc27q0kgz7cz6qpxnva1-deadnix-1.2.1/bin/deadnix"},["eslint_d"] = {["cmd"] = "/nix/store/9q58fv8y9sv68yadh3jblkmz4jz8rbyb-eslint_d-14.3.0/bin/eslint_d",["required_files"] = {"eslint.config.js","eslint.config.mjs",".eslintrc",".eslintrc.json",".eslintrc.js",".eslintrc.yml"}},["shellcheck"] = {["cmd"] = "/nix/store/drpki83hjnnwyqp663fg8wvy6gk2y670-shellcheck-0.10.0-bin/bin/shellcheck"},["sqlfluff"] = {["args"] = {"lint","--format=json","--dialect=ansi"},["cmd"] = "/nix/store/x2qzlmkc86v6qb5fg1mgm5wm3b9pwljw-sqlfluff-3.4.2/bin/sqlfluff"},["statix"] = {["cmd"] = "/nix/store/avh9zvdgw3bxz5w1p4i8hp96rl90nnlb-statix-0.5.8/bin/statix"}}
for linter, config in pairs(nvf_linters) do
  if linters[linter] == nil then
    linters[linter] = config
  else
    for key, val in pairs(config) do
      linters[linter][key] = val
    end
  end
end

nvf_lint = function(buf)
  local ft = vim.api.nvim_get_option_value("filetype", { buf = buf })
  local linters = require("lint").linters
  local linters_from_ft = require("lint").linters_by_ft[ft]

  -- if no linter is configured for this filetype, stops linting
  if linters_from_ft == nil then return end

  for _, name in ipairs(linters_from_ft) do
    local linter = linters[name]
    assert(linter, 'Linter with name `' .. name .. '` not available')

    if type(linter) == "function" then
      linter = linter()
    end
    -- for require("lint").lint() to work, linter.name must be set
    linter.name = linter.name or name
    local cwd = linter.required_files

    -- if no configuration files are configured, lint
    if cwd == nil then
      require("lint").lint(linter)
    else
      -- if configuration files are configured and present in the project, lint
      for _, fn in ipairs(cwd) do
        local path = vim.fs.joinpath(linter.cwd or vim.fn.getcwd(), fn);
        if vim.uv.fs_stat(path) then
          require("lint").lint(linter)
          break
        end
      end
    end
  end
end



-- SECTION: nvim-notify
local notify = require("notify")
notify.setup({["background_colour"] = "NotifyBackground",["icons"] = {["DEBUG"] = "",["ERROR"] = "",["INFO"] = "",["TRACE"] = "",["WARN"] = ""},["position"] = "top_right",["render"] = "compact",["stages"] = "fade_in_slide_out",["timeout"] = 1000})
vim.notify = notify.notify


-- SECTION: nvim-web-devicons
require("nvim-web-devicons").setup({["color_icons"] = true,["override"] = {}})


-- SECTION: project-nvim
require('project_nvim').setup({["detection_methods"] = {"lsp","pattern"},["exclude_dirs"] = {},["lsp_ignored"] = {},["manual_mode"] = true,["patterns"] = {".git","_darcs",".hg",".bzr",".svn","Makefile","package.json","flake.nix","cargo.toml"},["scope_chdir"] = "global",["show_hidden"] = false,["silent_chdir"] = true})


-- SECTION: python-debugger
dap.adapters.debugpy = function(cb, config)
  if config.request == 'attach' then
    ---@diagnostic disable-next-line: undefined-field
    local port = (config.connect or config).port
    ---@diagnostic disable-next-line: undefined-field
    local host = (config.connect or config).host or '127.0.0.1'
    cb({
      type = 'server',
      port = assert(port, '`connect.port` is required for a python `attach` configuration'),
      host = host,
      options = {
        source_filetype = 'python',
      },
    })
  else
    cb({
      type = 'executable',
      command = '/nix/store/r14hkf60wvplfxqcjffghvby95l8n20x-python3-3.13.5-env/bin/python3.13',
      args = { '-m', 'debugpy.adapter' },
      options = {
        source_filetype = 'python',
      },
    })
  end
end

dap.configurations.python = {
  {
    -- The first three options are required by nvim-dap
    type = 'debugpy'; -- the type here established the link to the adapter definition: `dap.adapters.debugpy`
    request = 'launch';
    name = "Launch file";

    -- Options below are for debugpy, see https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for supported options

    program = "${file}"; -- This configuration will launch the current file if used.
    pythonPath = function()
      -- debugpy supports launching an application with a different interpreter then the one used to launch debugpy itself.
      -- The code below looks for a `venv` or `.venv` folder in the current directly and uses the python within.
      -- You could adapt this - to for example use the `VIRTUAL_ENV` environment variable.
      local cwd = vim.fn.getcwd()
      if vim.fn.executable(cwd .. '/venv/bin/python') == 1 then
        return cwd .. '/venv/bin/python'
      elseif vim.fn.executable(cwd .. '/.venv/bin/python') == 1 then
        return cwd .. '/.venv/bin/python'
      elseif vim.fn.executable("python") == 1 then
        return vim.fn.exepath("python")
      else -- WARNING cfg.dap.package probably has NO libraries other than builtins and debugpy
        return '/nix/store/r14hkf60wvplfxqcjffghvby95l8n20x-python3-3.13.5-env/bin/python3.13'
      end
    end;
  },
}


-- SECTION: python-lsp
lspconfig.basedpyright.setup{
  capabilities = capabilities;
  on_attach = default_on_attach;
  cmd = {"/nix/store/qkg7rmxw1x3b72sqrmsd0v8iqh5kfzs9-basedpyright-1.30.1/bin/basedpyright-langserver", "--stdio"}
}


-- SECTION: rust-crates
require('crates').setup {
  null_ls = {
    enabled = true,
    name = "crates.nvim",
  }
}


-- SECTION: rustaceanvim
vim.g.rustaceanvim = {
-- LSP
tools = {
  hover_actions = {
    replace_builtin_hover = false
  },
},
server = {
  cmd = {"/nix/store/6mzhpa4shqcknrvb6h1iswvgc6b0bnl9-rust-analyzer-2025-07-14/bin/rust-analyzer"},
  default_settings = {
    
  },
  on_attach = function(client, bufnr)
    default_on_attach(client, bufnr)
    local opts = { noremap=true, silent=true, buffer = bufnr }
    vim.keymap.set("n", "<localleader>rr", ":RustLsp runnables<CR>", opts)
    vim.keymap.set("n", "<localleader>rp", ":RustLsp parentModule<CR>", opts)
    vim.keymap.set("n", "<localleader>rm", ":RustLsp expandMacro<CR>", opts)
    vim.keymap.set("n", "<localleader>rc", ":RustLsp openCargo", opts)
    vim.keymap.set("n", "<localleader>rg", ":RustLsp crateGraph x11", opts)
    vim.keymap.set("n", "<localleader>rd", ":RustLsp debuggables<cr>", opts)
vim.keymap.set(
 "n", "<leader>dc",
 function()
   local dap = require("dap")
   if dap.status() == "" then
     vim.cmd "RustLsp debuggables"
   else
     dap.continue()
   end
 end,
 opts
)

  end
},


  dap = {
  adapter = {
    type = "executable",
    command = "/nix/store/69zahfzdmmqqdn4zvqkpp4d3xvr5478v-lldb-19.1.7/bin/lldb-dap",
    name = "rustacean_lldb",
  },
},

}


-- SECTION: smartcolumn
require("smartcolumn").setup({["colorcolumn"] = "120",["custom_colorcolumn"] = {},["disabled_filetypes"] = {"help","text","markdown","NvimTree","alpha"}})


-- SECTION: sql-lsp
lspconfig.sqls.setup {
  on_attach = function(client)
    client.server_capabilities.execute_command = true
    on_attach_keymaps(client, bufnr)
    require'sqls'.setup{}
  end,
  cmd = { "/nix/store/80mvylkp0akc9hi2lrl8v9673vr0si4c-sqls-0.2.28/bin/sqls", "-config", string.format("%s/config.yml", vim.fn.getcwd()) }
}


-- SECTION: treesitter
require('nvim-treesitter.configs').setup {
  -- Disable imperative treesitter options that would attempt to fetch
  -- grammars into the read-only Nix store. To add additional grammars here
  -- you must use the `config.vim.treesitter.grammars` option.
  auto_install = false,
  sync_install = false,
  ensure_installed = {},

  -- Indentation module for Treesitter
  indent = {
    enable = true,
    disable = {},
  },

  -- Highlight module for Treesitter
  highlight = {
    enable = true,
    disable = {},
    additional_vim_regex_highlighting = false,
  },

  -- Indentation module for Treesitter
  -- Keymaps are set to false here as they are
  -- handled by `vim.maps` entries calling lua
  -- functions achieving the same functionality.
  incremental_selection = {
    enable = true,
    disable = {},
    keymaps = {
      init_selection = false,
      node_incremental = false,
      scope_incremental = false,
      node_decremental = false,

    },
  },
}


-- SECTION: treesitter-fold
-- This is required by treesitter-context to handle folds
vim.o.foldmethod = "expr"
vim.o.foldexpr = "nvim_treesitter#foldexpr()"

-- This is optional, but is set rather as a sane default.
-- If unset, opened files will be folded by automatically as
-- the files are opened
vim.o.foldenable = false


-- SECTION: vim-illuminate
require('illuminate').configure({["filetypes_denylist"] = {"dirvish","fugitive","help","neo-tree","notify","NvimTree","TelescopePrompt"}})


-- SECTION: whichkey
local wk = require("which-key")
wk.setup ({["notify"] = true,["preset"] = "modern",["replace"] = {["<cr>"] = "RETURN",["<leader>"] = "SPACE",["<space>"] = "SPACE",["<tab>"] = "TAB"},["win"] = {["border"] = "rounded"}})
wk.add({{{ '<leader>f', desc = '+Telescope' }},{{ '<leader>fl', desc = 'Telescope LSP' }},{{ '<leader>fm', desc = 'Cellular Automaton' }},{{ '<leader>fv', desc = 'Telescope Git' }},{{ '<leader>fvc', desc = 'Commits' }},{{ '<leader>h', desc = '+Gitsigns' }},{{ '<leader>lw', desc = '+Workspace' }},{{ '<leader>x', desc = '+Trouble' }}})




-- SECTION: augroups
local nvf_autogroups = {}
for _, group in ipairs({{["clear"] = true,["enable"] = true,["name"] = "nvf-config-lint"},{["clear"] = true,["enable"] = true,["name"] = "nvf_lazy_file_hooks"},{["clear"] = true,["enable"] = true,["name"] = "nvf_lsp"}}) do
  if group.name then
    nvf_autogroups[group.name] = { clear = group.clear }
  end
end

for group_name, options in pairs(nvf_autogroups) do
  vim.api.nvim_create_augroup(group_name, options)
end


-- SECTION: autocmds
local nvf_autocommands = {{["callback"] = function(args)
  local client = vim.lsp.get_client_by_id(args.data.client_id)

  if client.name == "qmlls" then
    vim.lsp.start(vim.lsp.config.qmlls)
  end
end
,["enable"] = true,["event"] = {"LspDetach"},["nested"] = false,["once"] = false},{["callback"] = function(args)
  nvf_lint(args.buf)
end
,["enable"] = true,["event"] = {"BufEnter","BufWritePost","InsertLeave"},["group"] = "nvf-config-lint",["nested"] = false,["once"] = false},{["command"] = "doautocmd User LazyFile",["enable"] = true,["event"] = {"BufReadPost","BufNewFile","BufWritePre"},["group"] = "nvf_lazy_file_hooks",["nested"] = false,["once"] = true},{["callback"] = function(event)
  local bufnr = event.buf
  local client = vim.lsp.get_client_by_id(event.data.client_id)
  if client and client.supports_method(vim.lsp.protocol.Methods.textDocument_inlayHint) then
    vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled({ bufnr = bufnr }), { bufnr = bufnr })
  end
end
,["desc"] = "LSP on-attach enable inlay hints autocmd",["enable"] = true,["event"] = {"LspAttach"},["group"] = "nvf_lsp",["nested"] = false,["once"] = false}}
for _, autocmd in ipairs(nvf_autocommands) do
  vim.api.nvim_create_autocmd(
    autocmd.event,
    {
      group     = autocmd.group,
      pattern   = autocmd.pattern,
      buffer    = autocmd.buffer,
      desc      = autocmd.desc,
      callback  = autocmd.callback,
      command   = autocmd.command,
      once      = autocmd.once,
      nested    = autocmd.nested
    }
  )
end


-- SECTION: diagnostics
vim.diagnostic.config({["signs"] = {["text"] = {["vim.diagnostic.severity.ERROR"] = "󰅚 ",["vim.diagnostic.severity.WARN"] = "󰀪 "}},["underline"] = true,["update_in_insert"] = false,["virtual_lines"] = true,["virtual_text"] = false})


-- SECTION: extraPluginConfigs

-- SECTION: nvim-dap-python
require("dap-python").setup("python3")

-- SECTION: nvim-ts-autotag
require('nvim-ts-autotag').setup({
  opts = {
    enable_close = true,
    enable_rename = true,
    enable_close_on_slash = false
  },
})



-- SECTION: ts-error-translator
require('ts-error-translator').setup()




-- SECTION: ft
vim.filetype.add({
  extension = {
    ejs = "html"
  }
})


-- SECTION: lsp-servers
-- Individual LSP configurations managed by nvf.
vim.lsp.config["*"] = {["capabilities"] = capabilities,["enable"] = true,["on_attach"] = default_on_attach}

vim.lsp.config["astro"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/b80cjbkg47an8cdygzhy8gb378g2immw-astro-language-server-2.15.4/bin/astro-ls","--stdio"},["enable"] = true,["on_attach"] = default_on_attach}

vim.lsp.config["cssls"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/xi3mgq23mkhdm2a2a0mjmxgk5fbq2hq6-vscode-css-languageserver-1.102.0/bin/vscode-css-languageserver","--stdio"},["enable"] = true,["on_attach"] = default_on_attach,["settings"] = {["css"] = {["lint"] = {["unknownAtRules"] = "ignore"}}}}

vim.lsp.config["gdscript"] = {["capabilities"] = capabilities,["enable"] = true,["on_attach"] = default_on_attach}

vim.lsp.config["jsonls"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/4ycrfx32z93q070m31yn216yqxbk0nxf-vscode-langservers-extracted-4.10.0/bin/vscode-json-language-server","--stdio"},["enable"] = true,["on_attach"] = default_on_attach,["settings"] = {["json"] = {["schemas"] = require("schemastore").json.schemas()
,["validate"] = {["enable"] = true}}}}

vim.lsp.config["qmlls"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/6d7gc4lc7fkjy6svi5mjb0fbjwsljr7n-qtdeclarative-6.9.1/bin/qmlls","-E"},["enable"] = true,["on_attach"] = default_on_attach}

vim.lsp.config["svelte"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/lbic1gcq3m8lb63j50wbbvq6k21wp2ww-svelte-language-server-0.17.16/bin/svelteserver","--stdio"},["enable"] = true,["on_attach"] = default_on_attach}

vim.lsp.config["tailwindcss"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/rh7dg7w8fxxq3qmla5mkdgzy4g1dfy05-tailwindcss-language-server-0.14.24/bin/tailwindcss-language-server","--stdio"},["enable"] = true,["on_attach"] = default_on_attach}

vim.lsp.config["ts_ls"] = {["capabilities"] = capabilities,["cmd"] = {"/nix/store/rb3xzs9lwfnlz6f3ij7b3yqy6xdw9zj9-typescript-language-server-4.3.3/bin/typescript-language-server","--stdio"},["enable"] = true,["on_attach"] = default_on_attach}



-- Enable configured LSPs explicitly
vim.lsp.enable({"astro","cssls","gdscript","jsonls","qmlls","svelte","tailwindcss","ts_ls"})


-- SECTION: mappings
vim.keymap.set("t", "<esc>", "<C-\\><C-n>", {["expr"] = false,["noremap"] = false,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<C-n>", ":Neotree toggle<CR>", {["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>lf", function() require('conform').format() end, {["desc"] = "Format [Conform]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dc", require('dap').continue, {["desc"] = "Continue",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dR", require('dap').restart, {["desc"] = "Restart",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dq", require('dap').terminate, {["desc"] = "Terminate",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>d.", require('dap').run_last, {["desc"] = "Re-run Last Debug Session",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dr", require('dap').repl.toggle, {["desc"] = "Toggle Repl",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dh", require('dap.ui.widgets').hover, {["desc"] = "Hover",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>db", require('dap').toggle_breakpoint, {["desc"] = "Toggle breakpoint",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dgc", require('dap').run_to_cursor, {["desc"] = "Continue to the current cursor",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dgi", require('dap').step_into, {["desc"] = "Step into function",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dgo", require('dap').step_out, {["desc"] = "Step out of function",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dgj", require('dap').step_over, {["desc"] = "Next step",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dgk", require('dap').step_back, {["desc"] = "Step back",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dvo", require('dap').up, {["desc"] = "Go up stacktrace",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set("n", "<leader>dvi", require('dap').down, {["desc"] = "Go down stacktrace",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>c0", "<Plug>(git-conflict-none)", {["desc"] = "Choose None [Git-Conflict]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>cb", "<Plug>(git-conflict-both)", {["desc"] = "Choose Both [Git-Conflict]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>co", "<Plug>(git-conflict-ours)", {["desc"] = "Choose Ours [Git-Conflict]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>ct", "<Plug>(git-conflict-theirs)", {["desc"] = "Choose Theirs [Git-Conflict]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hD", function() package.loaded.gitsigns.diffthis('~') end, {["desc"] = "Diff project [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hP", package.loaded.gitsigns.preview_hunk, {["desc"] = "Preview hunk [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hR", package.loaded.gitsigns.reset_buffer, {["desc"] = "Reset buffer [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hS", package.loaded.gitsigns.stage_buffer, {["desc"] = "Stage buffer [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hb", function() package.loaded.gitsigns.blame_line{full=true} end, {["desc"] = "Blame line [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hd", package.loaded.gitsigns.diffthis, {["desc"] = "Diff this [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hr", package.loaded.gitsigns.reset_hunk, {["desc"] = "Reset hunk [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hs", package.loaded.gitsigns.stage_hunk, {["desc"] = "Stage hunk [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>hu", package.loaded.gitsigns.undo_stage_hunk, {["desc"] = "Undo stage hunk [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>lvt", "<cmd>DocsViewToggle<CR>", {["desc"] = "Open or close the docs view panel",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>lvu", "<cmd>DocsViewUpdate<CR>", {["desc"] = "Manually update the docs view panel",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>tb", package.loaded.gitsigns.toggle_current_line_blame, {["desc"] = "Toggle blame [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "<leader>td", package.loaded.gitsigns.toggle_deleted, {["desc"] = "Toggle deleted [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "[c", function()
  if vim.wo.diff then return "[c" end

  vim.schedule(function() package.loaded.gitsigns.prev_hunk() end)

  return '<Ignore>'
end
, {["desc"] = "Previous hunk [Gitsigns]",["expr"] = true,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "[x", "<Plug>(git-conflict-next-conflict)", {["desc"] = "Go to the next Conflict [Git-Conflict]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "]c", function()
  if vim.wo.diff then return "]c" end

  vim.schedule(function() package.loaded.gitsigns.next_hunk() end)

  return '<Ignore>'
end
, {["desc"] = "Next hunk [Gitsigns]",["expr"] = true,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "]x", "<Plug>(git-conflict-prev-conflict)", {["desc"] = "Go to the previous Conflict [Git-Conflict]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n"}, "gnn", ":lua require('nvim-treesitter.incremental_selection').init_selection()<CR>", {["desc"] = "Init selection [treesitter]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"v"}, "<leader>hr", function() package.loaded.gitsigns.reset_hunk {vim.fn.line('.'), vim.fn.line('v')} end, {["desc"] = "Reset hunk [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"v"}, "<leader>hs", function() package.loaded.gitsigns.stage_hunk {vim.fn.line('.'), vim.fn.line('v')} end, {["desc"] = "Stage hunk [Gitsigns]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n","x"}, "grc", "<cmd>lua require('nvim-treesitter.incremental_selection').scope_incremental()<CR>", {["desc"] = "Increment selection by scope [treesitter]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n","x"}, "grm", "<cmd>lua require('nvim-treesitter.incremental_selection').node_decremental()<CR>", {["desc"] = "Decrement selection by node [treesitter]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})
vim.keymap.set({"n","x"}, "grn", "<cmd>lua require('nvim-treesitter.incremental_selection').node_incremental()<CR>", {["desc"] = "Increment selection by node [treesitter]",["expr"] = false,["noremap"] = true,["nowait"] = false,["script"] = false,["silent"] = true,["unique"] = false})



